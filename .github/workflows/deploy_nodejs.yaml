name: Deploy Node.js with Docker

on:
  push:
    branches: [ main, master ]
  workflow_dispatch: # Allows manual triggering

jobs:
  build-and-deploy:
    name: Build and Deploy
    runs-on: self-hosted # Uses your self-hosted runner
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      
    - name: Build and tag Docker image
      run: |
        docker build -t nodejs-express-app:${{ github.sha }} -t nodejs-express-app:latest .
      
    - name: Stop existing container
      run: |
        docker stop nodejs-app-container || true
        docker rm nodejs-app-container || true
      continue-on-error: true
      
    - name: Deploy container
      run: |
        docker run -d --name nodejs-app-container \
          -p 3000:3000 \
          --restart unless-stopped \
          nodejs-express-app:latest
          
    - name: Verify deployment
      run: |
        # Wait for container to start
        sleep 10
        
        # Check if container is running
        CONTAINER_STATUS=$(docker inspect --format='{{.State.Status}}' nodejs-app-container)
        if [ "$CONTAINER_STATUS" != "running" ]; then
          echo "Container failed to start properly"
          docker logs nodejs-app-container
          exit 1
        fi
        
        # Test API endpoint
        RETRY_COUNT=0
        MAX_RETRIES=5
        
        until [ $RETRY_COUNT -ge $MAX_RETRIES ]
        do
          HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:3000)
          if [ $HTTP_STATUS -eq 200 ]; then
            echo "Application is running successfully!"
            break
          fi
          
          RETRY_COUNT=$((RETRY_COUNT+1))
          echo "Waiting for application to become available... (Attempt $RETRY_COUNT/$MAX_RETRIES)"
          sleep 5
        done
        
        if [ $RETRY_COUNT -ge $MAX_RETRIES ]; then
          echo "Application failed to respond properly after deployment"
          docker logs nodejs-app-container
          exit 1
        fi
        
    - name: Clean up old images
      run: |
        # Keep only the 5 most recent images
        docker image prune -a --filter "label!=nodejs-express-app" --filter "until=168h" -f
      continue-on-error: true